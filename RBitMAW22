// l - bit length of a patter, n - byte length of a text
int RBitMAW22(unsigned char *x, int l, unsigned char *y, int n) {
const unsigned int b=8,k=12; // b bits in byte; k significant bits in 2-byte read
const unsigned int b2=b*2,sigma=1<<b,_2_power_k=(1<<k);
const unsigned int _2_power_k_2=_2_power_k*2;

int j,q,start,pos,mp1=m+1,mm1=m-1,mm2=m-2,count=0,m2=2*m,m2m2=m2-2,m2m1=m2-1,r,s;
unsigned char* ptr;
unsigned char lastMask=(sigma-1)<<(b-mb);
unsigned int t,mask=_2_power_k-1,mask1=(sigma-1)<<b2,mask2=mask&((sigma-1)<<b);
int lambda[sigma][b];
unsigned char *_V0[_2_power_k],_V1[_2_power_k_2];

// Preprocessing
	for(j=0;j<b;j++)
		for(int i=0;i<sigma;i++)
			lambda[i][j]=-1;	// lambda[c][j] is the j-th element of the set lambda[c]
	for(int i=0;i<b;i++) {
		unsigned char c=(P[0]<<i)|(P[1]>>(b-i));
		for(j=0;lambda[c][j]>=0;j++);
		lambda[c][j]=i;
	}
	for(int i=0;i<_2_power_k;i++) {
		_V0[i]=_V1;
		_V1[i]=0;
	}
	for (int i = _2_power_k; i < _2_power_k_2; i++)
		_V1[i] = 1;

	for(int i=0;i<l-b;i++) {
		/*********** Bitword(i) **************/
		r=i/b;
		s=(((unsigned int)P[r])<<b2)|(((unsigned int)P[r+1])<<b)|P[r+2];
		s<<=(i%b);
		t=((s&mask1)>>b2)|(s&mask2);
		/*********** end Bitword **************/
		_V0[t]=_V1+_2_power_k;
		_V1[t]=1;
		if(l-i<b2){
			int stop=1<<(l-i>3*b-k?b2-l+i:k-b);			// stop = 2^s (lines 12-14 of Alg. 9)
			for(j=0;j<stop;j++) {
				_V0[t|(j<<b)]=_V1+_2_power_k;
				_V1[t|(j<<b)]=1;
			}
		}
	}

// Search
	memcpy(y+m+1,x,m+1);
	pos=n-m2+1;
	while (pos>=m2) {
		ptr=(unsigned char*)_V0[((*(unsigned short*)(y+pos+mm1)))&mask];
		while(ptr[((*(unsigned short*)(y+pos)))&mask]==0) {
			pos-=m2m2;
			ptr=(unsigned char*)_V0[((*(unsigned short*)(y+pos+mm1)))&mask];
		} 
		for(int i=0;(q=lambda[y[pos+mm1]][i])>=0;i++) {
			/********** CheckMatch(q,pos) ************/
			for(j=start=pos+mm2;j-start<m && (unsigned char)((y[j]<<(b-q))|(y[j+1]>>q))==x[j-start];j++);
			if(j-start==m)
				if((((y[j]<<(b-q))|(y[j+1]>>q))&lastMask)==P[m])
					count++;
			/********** end CheckMatch ************/
		}
		pos--;
	}
	return count;
}
