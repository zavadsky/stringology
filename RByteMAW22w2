int RByteMAW22w2(unsigned char *x, const int m, unsigned char *y, int n) {
	int mp1=m+1, mm1=m-1, mm2=m-2, m2=m*2, pos1, pos2, r, count = 0, half = n/2;
	unsigned char *ptr1, *ptr2;
	const unsigned int b=8, k=12; // b bits in byte; k significant bits in 2-byte read
	const unsigned int sigma=1<<b, _2_power_k=(1<<k);
	const unsigned int mask=_2_power_k-1, _2_power_k_2=_2_power_k*2;
	unsigned char *_V0[_2_power_k], _V1[_2_power_k_2];
	int QSR[1000];

	QueryPerformanceCounter(&start);
// Preprocessing
	for (int i = 0; i < _2_power_k; i++) {				// Alg. 3 - 1
		_V0[i] = _V1;
		_V1[i] = 0;
	}
	for (int i = _2_power_k; i < _2_power_k_2; i++)		// Alg. 3 - 2
		_V1[i] = 1;
	for (int i = 0; i < mm1; i++)						// Alg. 3 - 3
		_V0[(*(ushort*)(x+i))&mask] = _V1+_2_power_k;
	for (ushort i = 0;i<(1<<(k-b)); i++)				// Alg. 3 - 4
		_V0[(i<<b)|x[mm1]] = _V1+_2_power_k;
	for (int i = 0; i < mm1; i++)						// Alg. 3 - 5
		_V1[(*(ushort*)(x+i))&mask] = 1;
	for (ushort i = 0;i<(1<<(k-b)); i++)				// Alg. 3 - 6
		_V1[(i<<b)|x[mm1]] = 1;

	for(int i=0;i<sigma;i++)				// QS reverse shift table
		QSR[i]=mp1;
	for(int i=m-1;i>=0;i--)
		QSR[x[i]]=i+1;
	
//Search
	memcpy(y+m,x,m);
	pos1=half;
	pos2=n-m2;
	while (pos1>m2) {
		ptr1=(uchar*)_V0[((*(unsigned short*)(y+pos1+m)))&mask];
		ptr2=(uchar*)_V0[((*(unsigned short*)(y+pos2+m)))&mask];
		while(ptr1[((*(unsigned short*)(y+pos1)))&mask]==0 && ptr2[((*(unsigned short*)(y+pos2)))&mask]==0 ) {
			pos1-=m2;
			pos2-=m2;
			ptr1=(uchar*)_V0[((*(unsigned short*)(y+pos1+m)))&mask];
			ptr2=(uchar*)_V0[((*(unsigned short*)(y+pos2+m)))&mask];
		}
		for (r = 0; r < m && y[pos1 + m + r] == x[r]; r++);	// occurrence check
		if (r == m)
			count++;
		for (r = 0; r < m && y[pos2 + m + r] == x[r]; r++);	
		if (r == m)
			count++;
		pos1-=QSR[y[pos1+mm1]];	
		pos2-=QSR[y[pos2+mm1]];
	}
	while(pos2>half) {  
		ptr2=(uchar*)A[((*(unsigned short*)(y+pos2+m)))&mask];
		while(ptr2[((*(unsigned short*)(y+pos2)))&mask]==0) {
			pos2-=m2;
			ptr2=(uchar*)A[((*(unsigned short*)(y+pos2+m)))&mask];
		}
		for (r = 0; r < m && y[pos2 + m + r] == x[r]; r++);
		if (r == m)
			count++;
		pos2-=QSR[y[pos2+mm1]];
	}
	QueryPerformanceCounter(&_end);
	u = (_end.QuadPart - start.QuadPart) * 1000000 / freq.QuadPart;
	return count;
}
